// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`adds component to docgen collection 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require(\\"react\\"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * This is an awesome looking button for React.
 */
class Button extends React.Component {
  static defaultProps = {
    label: \\"label\\",
    size: \\"default\\"
  };

  render() {
    const _props = this.props,
          label = _props.label,
          onClick = _props.onClick;
    return React.createElement(React.Fragment, null, React.createElement(\\"button\\", {
      onClick: onClick
    }, label));
  }

}

var _default = Button;
exports.default = _default;

try {
  Button.displayName = \\"Button\\";
  Button.__docgenInfo = {
    description: \\"This is an awesome looking button for React.\\",
    displayName: \\"Button\\",
    props: {
      \\"label\\": {
        \\"defaultValue\\": {
          \\"value\\": \\"label\\"
        },
        \\"description\\": \\"Label for button.\\",
        \\"name\\": \\"label\\",
        \\"required\\": false,
        \\"type\\": {
          \\"name\\": \\"string\\",
          \\"raw\\": null,
          \\"value\\": null
        }
      },
      \\"onClick\\": {
        \\"defaultValue\\": null,
        \\"description\\": \\"Triggered when button is clicked.\\",
        \\"name\\": \\"onClick\\",
        \\"required\\": true,
        \\"type\\": {
          \\"name\\": \\"(event: SyntheticEvent<any>) => void\\",
          \\"raw\\": null,
          \\"value\\": null
        }
      },
      \\"optionalColor\\": {
        \\"defaultValue\\": {
          \\"value\\": \\"#fff\\"
        },
        \\"description\\": \\"An optional color to apply to the button.\\",
        \\"name\\": \\"optionalColor\\",
        \\"required\\": false,
        \\"type\\": {
          \\"name\\": \\"string\\",
          \\"raw\\": null,
          \\"value\\": null
        }
      },
      \\"size\\": {
        \\"defaultValue\\": {
          \\"value\\": \\"default\\"
        },
        \\"description\\": \\"Defines the size of the button.\\",
        \\"name\\": \\"size\\",
        \\"required\\": false,
        \\"type\\": {
          \\"name\\": \\"Size\\",
          \\"raw\\": null,
          \\"value\\": null
        }
      }
    }
  };

  if (typeof STORYBOOK_REACT_CLASSES !== \\"undefined\\") {
    STORYBOOK_REACT_CLASSES[\\"src/__fixtures__/Component.tsx#Button\\"] = {
      name: \\"Button\\",
      docgenInfo: Button.__docgenInfo,
      path: \\"src/__fixtures__/Component.tsx#Button\\"
    };
  }
} catch (e) {}"
`;

exports[`does not truncate large union types 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require(\\"react\\"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * This is a component to test large union types.
 */
const LargeUnion = props => {
  const Tag = props.as;
  return React.createElement(Tag, null, \\"Lorem Ipsum\\");
};

var _default = LargeUnion;
exports.default = _default;

try {
  LargeUnion.displayName = \\"LargeUnion\\";
  LargeUnion.__docgenInfo = {
    description: \\"This is a component to test large union types.\\",
    displayName: \\"LargeUnion\\",
    props: {
      \\"as\\": {
        \\"defaultValue\\": null,
        \\"description\\": \\"HTML attribute type.\\",
        \\"name\\": \\"as\\",
        \\"required\\": true,
        \\"type\\": {
          \\"name\\": \\"\\\\\\"symbol\\\\\\" | \\\\\\"object\\\\\\" | \\\\\\"a\\\\\\" | \\\\\\"abbr\\\\\\" | \\\\\\"address\\\\\\" | \\\\\\"area\\\\\\" | \\\\\\"article\\\\\\" | \\\\\\"aside\\\\\\" | \\\\\\"audio\\\\\\" | \\\\\\"b\\\\\\" | \\\\\\"base\\\\\\" | \\\\\\"bdi\\\\\\" | \\\\\\"bdo\\\\\\" | \\\\\\"big\\\\\\" | \\\\\\"blockquote\\\\\\" | \\\\\\"body\\\\\\" | \\\\\\"br\\\\\\" | \\\\\\"button\\\\\\" | \\\\\\"canvas\\\\\\" | \\\\\\"caption\\\\\\" | \\\\\\"cite\\\\\\" | \\\\\\"code\\\\\\" | \\\\\\"col\\\\\\" | \\\\\\"colgroup\\\\\\" | \\\\\\"data\\\\\\" | \\\\\\"datalist\\\\\\" | \\\\\\"dd\\\\\\" | \\\\\\"del\\\\\\" | \\\\\\"details\\\\\\" | \\\\\\"dfn\\\\\\" | \\\\\\"dialog\\\\\\" | \\\\\\"div\\\\\\" | \\\\\\"dl\\\\\\" | \\\\\\"dt\\\\\\" | \\\\\\"em\\\\\\" | \\\\\\"embed\\\\\\" | \\\\\\"fieldset\\\\\\" | \\\\\\"figcaption\\\\\\" | \\\\\\"figure\\\\\\" | \\\\\\"footer\\\\\\" | \\\\\\"form\\\\\\" | \\\\\\"h1\\\\\\" | \\\\\\"h2\\\\\\" | \\\\\\"h3\\\\\\" | \\\\\\"h4\\\\\\" | \\\\\\"h5\\\\\\" | \\\\\\"h6\\\\\\" | \\\\\\"head\\\\\\" | \\\\\\"header\\\\\\" | \\\\\\"hgroup\\\\\\" | \\\\\\"hr\\\\\\" | \\\\\\"html\\\\\\" | \\\\\\"i\\\\\\" | \\\\\\"iframe\\\\\\" | \\\\\\"img\\\\\\" | \\\\\\"input\\\\\\" | \\\\\\"ins\\\\\\" | \\\\\\"kbd\\\\\\" | \\\\\\"keygen\\\\\\" | \\\\\\"label\\\\\\" | \\\\\\"legend\\\\\\" | \\\\\\"li\\\\\\" | \\\\\\"link\\\\\\" | \\\\\\"main\\\\\\" | \\\\\\"map\\\\\\" | \\\\\\"mark\\\\\\" | \\\\\\"menu\\\\\\" | \\\\\\"menuitem\\\\\\" | \\\\\\"meta\\\\\\" | \\\\\\"meter\\\\\\" | \\\\\\"nav\\\\\\" | \\\\\\"noindex\\\\\\" | \\\\\\"noscript\\\\\\" | \\\\\\"ol\\\\\\" | \\\\\\"optgroup\\\\\\" | \\\\\\"option\\\\\\" | \\\\\\"output\\\\\\" | \\\\\\"p\\\\\\" | \\\\\\"param\\\\\\" | \\\\\\"picture\\\\\\" | \\\\\\"pre\\\\\\" | \\\\\\"progress\\\\\\" | \\\\\\"q\\\\\\" | \\\\\\"rp\\\\\\" | \\\\\\"rt\\\\\\" | \\\\\\"ruby\\\\\\" | \\\\\\"s\\\\\\" | \\\\\\"samp\\\\\\" | \\\\\\"script\\\\\\" | \\\\\\"section\\\\\\" | \\\\\\"select\\\\\\" | \\\\\\"small\\\\\\" | \\\\\\"source\\\\\\" | \\\\\\"span\\\\\\" | \\\\\\"strong\\\\\\" | \\\\\\"style\\\\\\" | \\\\\\"sub\\\\\\" | \\\\\\"summary\\\\\\" | \\\\\\"sup\\\\\\" | \\\\\\"table\\\\\\" | \\\\\\"tbody\\\\\\" | \\\\\\"td\\\\\\" | \\\\\\"textarea\\\\\\" | \\\\\\"tfoot\\\\\\" | \\\\\\"th\\\\\\" | \\\\\\"thead\\\\\\" | \\\\\\"time\\\\\\" | \\\\\\"title\\\\\\" | \\\\\\"tr\\\\\\" | \\\\\\"track\\\\\\" | \\\\\\"u\\\\\\" | \\\\\\"ul\\\\\\" | \\\\\\"var\\\\\\" | \\\\\\"video\\\\\\" | \\\\\\"wbr\\\\\\" | \\\\\\"webview\\\\\\" | \\\\\\"svg\\\\\\" | \\\\\\"animate\\\\\\" | \\\\\\"animateTransform\\\\\\" | \\\\\\"circle\\\\\\" | \\\\\\"clipPath\\\\\\" | \\\\\\"defs\\\\\\" | \\\\\\"desc\\\\\\" | \\\\\\"ellipse\\\\\\" | \\\\\\"feBlend\\\\\\" | \\\\\\"feColorMatrix\\\\\\" | \\\\\\"feComponentTransfer\\\\\\" | \\\\\\"feComposite\\\\\\" | \\\\\\"feConvolveMatrix\\\\\\" | \\\\\\"feDiffuseLighting\\\\\\" | \\\\\\"feDisplacementMap\\\\\\" | \\\\\\"feDistantLight\\\\\\" | \\\\\\"feFlood\\\\\\" | \\\\\\"feFuncA\\\\\\" | \\\\\\"feFuncB\\\\\\" | \\\\\\"feFuncG\\\\\\" | \\\\\\"feFuncR\\\\\\" | \\\\\\"feGaussianBlur\\\\\\" | \\\\\\"feImage\\\\\\" | \\\\\\"feMerge\\\\\\" | \\\\\\"feMergeNode\\\\\\" | \\\\\\"feMorphology\\\\\\" | \\\\\\"feOffset\\\\\\" | \\\\\\"fePointLight\\\\\\" | \\\\\\"feSpecularLighting\\\\\\" | \\\\\\"feSpotLight\\\\\\" | \\\\\\"feTile\\\\\\" | \\\\\\"feTurbulence\\\\\\" | \\\\\\"filter\\\\\\" | \\\\\\"foreignObject\\\\\\" | \\\\\\"g\\\\\\" | \\\\\\"image\\\\\\" | \\\\\\"line\\\\\\" | \\\\\\"linearGradient\\\\\\" | \\\\\\"marker\\\\\\" | \\\\\\"mask\\\\\\" | \\\\\\"metadata\\\\\\" | \\\\\\"path\\\\\\" | \\\\\\"pattern\\\\\\" | \\\\\\"polygon\\\\\\" | \\\\\\"polyline\\\\\\" | \\\\\\"radialGradient\\\\\\" | \\\\\\"rect\\\\\\" | \\\\\\"stop\\\\\\" | \\\\\\"switch\\\\\\" | \\\\\\"text\\\\\\" | \\\\\\"textPath\\\\\\" | \\\\\\"tspan\\\\\\" | \\\\\\"use\\\\\\" | \\\\\\"view\\\\\\"\\",
          \\"raw\\": null,
          \\"value\\": null
        }
      }
    }
  };
} catch (e) {}"
`;

exports[`extracts literal values from enum, unions and custom types 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require(\\"react\\"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * This is an awesome looking button for React.
 */
class Button extends React.Component {
  static defaultProps = {
    label: \\"label\\",
    size: \\"default\\"
  };

  render() {
    const _props = this.props,
          label = _props.label,
          onClick = _props.onClick;
    return React.createElement(React.Fragment, null, React.createElement(\\"button\\", {
      onClick: onClick
    }, label));
  }

}

var _default = Button;
exports.default = _default;

try {
  Button.displayName = \\"Button\\";
  Button.__docgenInfo = {
    description: \\"This is an awesome looking button for React.\\",
    displayName: \\"Button\\",
    props: {
      \\"label\\": {
        \\"defaultValue\\": {
          \\"value\\": \\"label\\"
        },
        \\"description\\": \\"Label for button.\\",
        \\"name\\": \\"label\\",
        \\"required\\": false,
        \\"type\\": {
          \\"name\\": \\"string\\",
          \\"raw\\": null,
          \\"value\\": null
        }
      },
      \\"onClick\\": {
        \\"defaultValue\\": null,
        \\"description\\": \\"Triggered when button is clicked.\\",
        \\"name\\": \\"onClick\\",
        \\"required\\": true,
        \\"type\\": {
          \\"name\\": \\"(event: SyntheticEvent<any>) => void\\",
          \\"raw\\": null,
          \\"value\\": null
        }
      },
      \\"optionalColor\\": {
        \\"defaultValue\\": {
          \\"value\\": \\"#fff\\"
        },
        \\"description\\": \\"An optional color to apply to the button.\\",
        \\"name\\": \\"optionalColor\\",
        \\"required\\": false,
        \\"type\\": {
          \\"name\\": \\"string\\",
          \\"raw\\": null,
          \\"value\\": null
        }
      },
      \\"size\\": {
        \\"defaultValue\\": {
          \\"value\\": \\"default\\"
        },
        \\"description\\": \\"Defines the size of the button.\\",
        \\"name\\": \\"size\\",
        \\"required\\": false,
        \\"type\\": {
          \\"name\\": \\"enum\\",
          \\"raw\\": \\"Size\\",
          \\"value\\": [{
            \\"value\\": \\"\\\\\\"default\\\\\\"\\"
          }, {
            \\"value\\": \\"\\\\\\"small\\\\\\"\\"
          }, {
            \\"value\\": \\"\\\\\\"large\\\\\\"\\"
          }]
        }
      }
    }
  };
} catch (e) {}"
`;

exports[`generates docgen for required props 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require(\\"react\\"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * This is an awesome looking button for React.
 */
class Button extends React.Component {
  static defaultProps = {
    label: \\"label\\",
    size: \\"default\\"
  };

  render() {
    const _props = this.props,
          label = _props.label,
          onClick = _props.onClick;
    return React.createElement(React.Fragment, null, React.createElement(\\"button\\", {
      onClick: onClick
    }, label));
  }

}

var _default = Button;
exports.default = _default;

try {
  Button.displayName = \\"Button\\";
  Button.__docgenInfo = {
    description: \\"This is an awesome looking button for React.\\",
    displayName: \\"Button\\",
    props: {
      \\"label\\": {
        \\"defaultValue\\": {
          \\"value\\": \\"label\\"
        },
        \\"description\\": \\"Label for button.\\",
        \\"name\\": \\"label\\",
        \\"required\\": false,
        \\"type\\": {
          \\"name\\": \\"string\\",
          \\"raw\\": null,
          \\"value\\": null
        }
      },
      \\"onClick\\": {
        \\"defaultValue\\": null,
        \\"description\\": \\"Triggered when button is clicked.\\",
        \\"name\\": \\"onClick\\",
        \\"required\\": true,
        \\"type\\": {
          \\"name\\": \\"(event: SyntheticEvent<any>) => void\\",
          \\"raw\\": null,
          \\"value\\": null
        }
      },
      \\"optionalColor\\": {
        \\"defaultValue\\": {
          \\"value\\": \\"#fff\\"
        },
        \\"description\\": \\"An optional color to apply to the button.\\",
        \\"name\\": \\"optionalColor\\",
        \\"required\\": false,
        \\"type\\": {
          \\"name\\": \\"string\\",
          \\"raw\\": null,
          \\"value\\": null
        }
      },
      \\"size\\": {
        \\"defaultValue\\": {
          \\"value\\": \\"default\\"
        },
        \\"description\\": \\"Defines the size of the button.\\",
        \\"name\\": \\"size\\",
        \\"required\\": false,
        \\"type\\": {
          \\"name\\": \\"Size\\",
          \\"raw\\": null,
          \\"value\\": null
        }
      }
    }
  };
} catch (e) {}"
`;

exports[`omits multiple props from options 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require(\\"react\\"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * This is an awesome looking button for React.
 */
class Button extends React.Component {
  static defaultProps = {
    label: \\"label\\",
    size: \\"default\\"
  };

  render() {
    const _props = this.props,
          label = _props.label,
          onClick = _props.onClick;
    return React.createElement(React.Fragment, null, React.createElement(\\"button\\", {
      onClick: onClick
    }, label));
  }

}

var _default = Button;
exports.default = _default;

try {
  Button.displayName = \\"Button\\";
  Button.__docgenInfo = {
    description: \\"This is an awesome looking button for React.\\",
    displayName: \\"Button\\",
    props: {
      \\"optionalColor\\": {
        \\"defaultValue\\": {
          \\"value\\": \\"#fff\\"
        },
        \\"description\\": \\"An optional color to apply to the button.\\",
        \\"name\\": \\"optionalColor\\",
        \\"required\\": false,
        \\"type\\": {
          \\"name\\": \\"string\\",
          \\"raw\\": null,
          \\"value\\": null
        }
      },
      \\"size\\": {
        \\"defaultValue\\": {
          \\"value\\": \\"default\\"
        },
        \\"description\\": \\"Defines the size of the button.\\",
        \\"name\\": \\"size\\",
        \\"required\\": false,
        \\"type\\": {
          \\"name\\": \\"Size\\",
          \\"raw\\": null,
          \\"value\\": null
        }
      }
    }
  };
} catch (e) {}"
`;

exports[`omits prop from options 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require(\\"react\\"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * This is an awesome looking button for React.
 */
class Button extends React.Component {
  static defaultProps = {
    label: \\"label\\",
    size: \\"default\\"
  };

  render() {
    const _props = this.props,
          label = _props.label,
          onClick = _props.onClick;
    return React.createElement(React.Fragment, null, React.createElement(\\"button\\", {
      onClick: onClick
    }, label));
  }

}

var _default = Button;
exports.default = _default;

try {
  Button.displayName = \\"Button\\";
  Button.__docgenInfo = {
    description: \\"This is an awesome looking button for React.\\",
    displayName: \\"Button\\",
    props: {
      \\"label\\": {
        \\"defaultValue\\": {
          \\"value\\": \\"label\\"
        },
        \\"description\\": \\"Label for button.\\",
        \\"name\\": \\"label\\",
        \\"required\\": false,
        \\"type\\": {
          \\"name\\": \\"string\\",
          \\"raw\\": null,
          \\"value\\": null
        }
      },
      \\"optionalColor\\": {
        \\"defaultValue\\": {
          \\"value\\": \\"#fff\\"
        },
        \\"description\\": \\"An optional color to apply to the button.\\",
        \\"name\\": \\"optionalColor\\",
        \\"required\\": false,
        \\"type\\": {
          \\"name\\": \\"string\\",
          \\"raw\\": null,
          \\"value\\": null
        }
      },
      \\"size\\": {
        \\"defaultValue\\": {
          \\"value\\": \\"default\\"
        },
        \\"description\\": \\"Defines the size of the button.\\",
        \\"name\\": \\"size\\",
        \\"required\\": false,
        \\"type\\": {
          \\"name\\": \\"Size\\",
          \\"raw\\": null,
          \\"value\\": null
        }
      }
    }
  };
} catch (e) {}"
`;
